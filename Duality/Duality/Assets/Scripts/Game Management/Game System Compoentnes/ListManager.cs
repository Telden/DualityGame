using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine;

public class ListManager : MonoBehaviour {
    [SerializeField]
    List<GameObject> mRandomizedList; //The list of units generated by the character randomization script
    [SerializeField]
    List<GameObject> mArmyList; //The selected units from the recruitment script
    [SerializeField]
    List<GameObject> mBattleList; //The units selected for combat in levels
    [SerializeField]
    List<GameObject> mRecruitmentButtonList; //List of the buttons in the recruitment menu
    [SerializeField]
    List<GameObject> mArmyViewButtonList; //List of the buttons in the army viewer menu

    // Use this for initialization
    void Start () {
        mRandomizedList = new List<GameObject>();
        mArmyList = new List<GameObject>(); 
        mBattleList = new List<GameObject>(); 
        mRecruitmentButtonList = new List<GameObject>();
        mArmyViewButtonList = new List<GameObject>();
    }
	
	// Update is called once per frame
	void Update () {
		
	}

                   // [RANDOMIIZED UNIT LIST FUNCTIONS]
    /******************************************************************************/

	//Add a unit ot the randomized unit list
	public void addRandomizedUnit(GameObject nRandomizedUnit)
	{
		mRandomizedList.Add(nRandomizedUnit);
	}

	//get a unit from the randomized unit list
	public GameObject getRandomizedUnit(int index)
	{
		return mRandomizedList[index];
	}

    //Remove a unit from the randomized unit list
    public void removeRandomizedUnit(int index)
	{
        mRandomizedList.RemoveAt(index);
	}
    //Get the amount of units in the list
    public int getRandomizedUnitListSize()
    {
        return mRandomizedList.Count;
    }
    //Get the randomized list
    //public List<GameObject> getRandomizedList()
    //{
    //    return mRandomizedList;
    //}


    // [RECRUITED UNIT LIST FUNCTIONS]
    /******************************************************************************/

    //Add a recruited unit
    public void addArmyUnit(GameObject nArmyUnit)
	{
		mArmyList.Add (nArmyUnit);
	}

    public GameObject getArmyUnit(int index)
	{
		return mArmyList [index];
	}

    //Remove a recruited unit
    public void removeArmyUnit(int index)
	{
        mArmyList.RemoveAt(index);
	}

    public int getArmyListSize()
    {
        return mArmyList.Count;
    }
    // [BATTLE UNIT LIST FUNCTIONS]
    /******************************************************************************/

    // Add a unit to the battle list
    public void addBattleUnit(GameObject nBattleUnit)
	{
        mBattleList.Add(nBattleUnit);
    }

    // Get a unit from the battle list
    public GameObject getBattleUnit(int index)
	{
		return mBattleList[index];
	}

    //Remove a unit from the battle list
    public void removeBattleUnit(int index)
	{
		mBattleList.RemoveAt(index);
	}

    //Clear the battle list
    public void clearBattleList()
    {
        for (int i = 0; i < mBattleList.Count; i++)
            Destroy(mBattleList[i]);

        mBattleList.Clear();
    }

    // [RECRUITMENT BUTTON LIST FUNCTIONS]
    /******************************************************************************/

    //Add a recruitment button to the recruitment button list
    public void addRecruitmentButton(GameObject nButton)
    {
        mRecruitmentButtonList.Add(nButton);
    }

    //Get a recruitment button from the recruitment button list
    public GameObject getRecruitmentButton(int index)
    {
        return mRecruitmentButtonList[index];
    }

    //Clear the recruitment button list
    public void clearRecruitmentButtonList()
    {
        for (int i = 0; i < mRecruitmentButtonList.Count; i++)
            Destroy(mRecruitmentButtonList[i]);

        mRecruitmentButtonList.Clear();
    }   

    // [VIEW ARMY BUTTON LIST FUNCTIONS]
    /******************************************************************************/

    //Add a view army button to the view army button list
    public void addViewArmyButton(GameObject nButton)
    {
        mArmyViewButtonList.Add(nButton);
    }

    public GameObject getViewArmyButton(int index)
    {
        return mArmyViewButtonList[index];
    }

    //Clear the view army button list
    public void clearViewArmyButtonList()
    {
        for (int i = 0; i < mArmyViewButtonList.Count; i++)
            Destroy(mArmyViewButtonList[i]);
        mArmyViewButtonList.Clear();
    }
}
